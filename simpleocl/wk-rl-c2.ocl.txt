context LoyaltyProgram def : getServicesByLevel(levelName: String): Set(Service) = levels->select( name = levelName ).availableServices->asSet()context LoyaltyProgram inv knownServiceLevel: levels-> includesAll(Membership.currentLevel)context LoyaltyProgram inv minServices: partners.deliveredServices->size() >= 1context LoyaltyProgram inv noAccounts: partners.deliveredServices->forAll( pointsEarned = 0 and pointsBurned = 0 ) implies Membership.account->isEmpty()context LoyaltyProgram inv firstLevel: levels->first().name = 'Silver'context Customer inv ofAge: age >= 18context Customer inv sizesAgree: programs->size() = cards->select( valid = true )->size()context ProgramPartner inv nrOfParticipants: numberOfCustomers = programs.participants->asSet()->size()context ProgramPartner inv totalPoints: deliveredServices.transactions.points->sum() < 10,000context ProgramPartner inv totalPointsEarning: deliveredServices.transactions ->select( oclIsTypeOf( Earning ) ).points->sum() < 10,000context CustomerCard inv checkDates: validFrom.isBefore(goodThru)context CustomerCard inv ofAge: owner.age >= 18context CustomerCard inv : let correctDate : Boolean = self.validFrom.isBefore(Date::now) and self.goodThru.isAfter(Date::now) in if valid then correctDate = false else correctDate = true endifcontext Membership inv correctCard: participants.cards->includes(self.card)context Membership def : getCurrentLevelName() : String = currentLevel.namecontext Membership inv levelAndColor: currentLevel.name = 'Silver' implies card.color = Color::silver and currentLevel.name = 'Gold' implies card.color = Color::gold