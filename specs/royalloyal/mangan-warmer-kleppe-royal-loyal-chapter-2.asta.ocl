-- Made with ocularium
--
context LoyaltyProgram
def : getServicesByLevel(levelName: String): Set(Service) = levels->select( name = levelName ).availableServices->asSet()

context LoyaltyProgram
inv knownServiceLevel: levels-> includesAll(Membership.currentLevel)

context LoyaltyProgram
inv minServices: partners.deliveredServices->size() >= 1

context LoyaltyProgram
inv noAccounts: partners.deliveredServices->forAll( pointsEarned = 0 and pointsBurned = 0 ) implies Membership.account->isEmpty()

context LoyaltyProgram
inv firstLevel: levels->first().name = 'Silver'

context LoyaltyProgram::levels
ordered

context LoyaltyProgram::getServices(): Set
BODYCONDITION:body : partners.deliveredServices->asSet()

context LoyaltyProgram::getServices(): void
BODYCONDITION:body : if partners->includes(pp) then pp.deliveredServices else Set endif

context Customer
inv ofAge: age >= 18

context Customer
inv sizesAgree: programs->size() = cards->select( valid = true )->size()

context Customer::age
post : age = age@pre + 1

context ProgramPartner
inv nrOfParticipants: numberOfCustomers = programs.participants->asSet()->size()

context ProgramPartner
inv totalPoints: deliveredServices.transactions.points->sum() < 10,000

context ProgramPartner
inv totalPointsEarning: deliveredServices.transactions ->select( oclIsTypeOf( Earning ) ).points->sum() < 10,000

context CustomerCard
inv checkDates: validFrom.isBefore(goodThru)

context CustomerCard
inv ofAge: owner.age >= 18

context CustomerCard
inv : let correctDate : Boolean = self.validFrom.isBefore(Date::now) and self.goodThru.isAfter(Date::now) in if valid then correctDate = false else correctDate = true endif

context CustomerCard::valid
init : 0

context CustomerCard::printedName
derive : owner.title.concat(' ').concat(owner.name)

context Service::upgradePointsEarned(): void
POSTCONDITION:post : calcPoints() = calcPoints@pre() + amount

context LoyaltyAccount::points
init : 0

context LoyaltyAccount::isEmpty(): Boolean
POSTCONDITION:post : result = (points = 0)

context Membership
inv correctCard: participants.cards->includes(self.card)

context Membership
def : getCurrentLevelName() : String = currentLevel.name

context Membership
inv levelAndColor: currentLevel.name = 'Silver' implies card.color = Color::silver and currentLevel.name = 'Gold' implies card.color = Color::gold

