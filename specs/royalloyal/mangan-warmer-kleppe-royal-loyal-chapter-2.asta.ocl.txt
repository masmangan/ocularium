
             alias1: []
             alias2: []
         definition: []
                 id: [p6n-07aa4ec7bf43003ce86b7e39e909a063]
               name: [def : getServicesByLevel(levelName: String): Set(Service) = levels->select( name = levelName ).availableServices->asSet()]
      specification: [def : getServicesByLevel(levelName: String): Set(Service) = levels->select( name = levelName ).availableServices->asSet()]
           type mod: []
           comments: [[]]
constrained element: [[LoyaltyProgram]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1348-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv knownServiceLevel: levels-> includesAll(Membership.currentLevel)]
      specification: [inv knownServiceLevel: levels-> includesAll(Membership.currentLevel)]
           type mod: []
           comments: [[]]
constrained element: [[LoyaltyProgram]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1mlv-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv minServices: partners.deliveredServices->size() >= 1]
      specification: [inv minServices: partners.deliveredServices->size() >= 1]
           type mod: []
           comments: [[]]
constrained element: [[LoyaltyProgram]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1xum-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv noAccounts: partners.deliveredServices->forAll( pointsEarned = 0 and pointsBurned = 0 ) implies Membership.account->isEmpty()]
      specification: [inv noAccounts: partners.deliveredServices->forAll( pointsEarned = 0 and pointsBurned = 0 ) implies Membership.account->isEmpty()]
           type mod: []
           comments: [[]]
constrained element: [[LoyaltyProgram]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [27du-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv firstLevel: levels->first().name = 'Silver']
      specification: [inv firstLevel: levels->first().name = 'Silver']
           type mod: []
           comments: [[]]
constrained element: [[LoyaltyProgram]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [3b7f-0b5ffb36ae47e77ae53e7fb8f77055a4]
               name: [ordered]
      specification: [ordered]
           type mod: []
           comments: [[]]
constrained element: [[levels]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [auo-07aa4ec7bf43003ce86b7e39e909a063]
               name: [BODYCONDITION:body : partners.deliveredServices->asSet()]
      specification: [BODYCONDITION:body : partners.deliveredServices->asSet()]
           type mod: []
           comments: [[]]
constrained element: [[getServices]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [huz-07aa4ec7bf43003ce86b7e39e909a063]
               name: [BODYCONDITION:body : if partners->includes(pp) then pp.deliveredServices else Set endif]
      specification: [BODYCONDITION:body : if partners->includes(pp) then pp.deliveredServices else Set endif]
           type mod: []
           comments: [[]]
constrained element: [[getServices]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [uei-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv ofAge: age >= 18]
      specification: [inv ofAge: age >= 18]
           type mod: []
           comments: [[]]
constrained element: [[Customer]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1sy1-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv sizesAgree: programs->size() = cards->select( valid = true )->size()]
      specification: [inv sizesAgree: programs->size() = cards->select( valid = true )->size()]
           type mod: []
           comments: [[]]
constrained element: [[Customer]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [2fjk-07aa4ec7bf43003ce86b7e39e909a063]
               name: [post : age = age@pre + 1]
      specification: [post : age = age@pre + 1]
           type mod: []
           comments: [[]]
constrained element: [[age]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [236g-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv nrOfParticipants: numberOfCustomers = programs.participants->asSet()->size()]
      specification: [inv nrOfParticipants: numberOfCustomers = programs.participants->asSet()->size()]
           type mod: []
           comments: [[]]
constrained element: [[ProgramPartner]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [2tw1-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv totalPoints: deliveredServices.transactions.points->sum() < 10,000]
      specification: [inv totalPoints: deliveredServices.transactions.points->sum() < 10,000]
           type mod: []
           comments: [[]]
constrained element: [[ProgramPartner]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [2y6w-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv totalPointsEarning: deliveredServices.transactions ->select( oclIsTypeOf( Earning ) ).points->sum() < 10,000]
      specification: [inv totalPointsEarning: deliveredServices.transactions ->select( oclIsTypeOf( Earning ) ).points->sum() < 10,000]
           type mod: []
           comments: [[]]
constrained element: [[ProgramPartner]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [yz2-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv checkDates: validFrom.isBefore(goodThru)]
      specification: [inv checkDates: validFrom.isBefore(goodThru)]
           type mod: []
           comments: [[]]
constrained element: [[CustomerCard]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [10yd-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv ofAge: owner.age >= 18]
      specification: [inv ofAge: owner.age >= 18]
           type mod: []
           comments: [[]]
constrained element: [[CustomerCard]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [32da-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv : let correctDate : Boolean = self.validFrom.isBefore(Date::now) and self.goodThru.isAfter(Date::now) in if valid then correctDate = false else correctDate = true endif]
      specification: [inv : let correctDate : Boolean = self.validFrom.isBefore(Date::now) and self.goodThru.isAfter(Date::now) in if valid then correctDate = false else correctDate = true endif]
           type mod: []
           comments: [[]]
constrained element: [[CustomerCard]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [6b0-07aa4ec7bf43003ce86b7e39e909a063]
               name: [init : 0]
      specification: [init : 0]
           type mod: []
           comments: [[]]
constrained element: [[valid]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [8kj-07aa4ec7bf43003ce86b7e39e909a063]
               name: [derive : owner.title.concat(' ').concat(owner.name)]
      specification: [derive : owner.title.concat(' ').concat(owner.name)]
           type mod: []
           comments: [[]]
constrained element: [[printedName]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [2maw-07aa4ec7bf43003ce86b7e39e909a063]
               name: [POSTCONDITION:post : calcPoints() = calcPoints@pre() + amount]
      specification: [POSTCONDITION:post : calcPoints() = calcPoints@pre() + amount]
           type mod: []
           comments: [[]]
constrained element: [[upgradePointsEarned]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [4gf-07aa4ec7bf43003ce86b7e39e909a063]
               name: [init : 0]
      specification: [init : 0]
           type mod: []
           comments: [[]]
constrained element: [[points]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [2cs3-07aa4ec7bf43003ce86b7e39e909a063]
               name: [POSTCONDITION:post : result = (points = 0)]
      specification: [POSTCONDITION:post : result = (points = 0)]
           type mod: []
           comments: [[]]
constrained element: [[isEmpty]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [19mw-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv correctCard: participants.cards->includes(self.card)]
      specification: [inv correctCard: participants.cards->includes(self.card)]
           type mod: []
           comments: [[]]
constrained element: [[Membership]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1cw7-07aa4ec7bf43003ce86b7e39e909a063]
               name: [def : getCurrentLevelName() : String = currentLevel.name]
      specification: [def : getCurrentLevelName() : String = currentLevel.name]
           type mod: []
           comments: [[]]
constrained element: [[Membership]]
        constraints: [[]]

             alias1: []
             alias2: []
         definition: []
                 id: [1g9d-07aa4ec7bf43003ce86b7e39e909a063]
               name: [inv levelAndColor: currentLevel.name = 'Silver' implies card.color = Color::silver and currentLevel.name = 'Gold' implies card.color = Color::gold]
      specification: [inv levelAndColor: currentLevel.name = 'Silver' implies card.color = Color::silver and currentLevel.name = 'Gold' implies card.color = Color::gold]
           type mod: []
           comments: [[]]
constrained element: [[Membership]]
        constraints: [[]]
