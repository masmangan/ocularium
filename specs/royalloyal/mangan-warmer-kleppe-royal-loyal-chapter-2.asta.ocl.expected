-- Made with ocularium (http://ocularium.github.io/ocularium)
--

context ocularium::examples::royalloyal::LoyaltyProgram
def : getServicesByLevel(levelName: String): Set(Service) = levels->select( name = levelName ).availableServices->asSet()

context ocularium::examples::royalloyal::LoyaltyProgram
inv knownServiceLevel: levels-> includesAll(Membership.currentLevel)

context ocularium::examples::royalloyal::LoyaltyProgram
inv minServices: partners.deliveredServices->size() >= 1

context ocularium::examples::royalloyal::LoyaltyProgram
inv noAccounts: partners.deliveredServices->forAll( pointsEarned = 0 and pointsBurned = 0 ) implies Membership.account->isEmpty()

context ocularium::examples::royalloyal::LoyaltyProgram
inv firstLevel: levels->first().name = 'Silver'

context ocularium::examples::royalloyal::LoyaltyProgram::getServices(): Set
body : partners.deliveredServices->asSet()

context ocularium::examples::royalloyal::LoyaltyProgram::getServices(pp: ProgramPartner): Set
body : if partners->includes(pp) then pp.deliveredServices else Set endif

context ocularium::examples::royalloyal::Customer
inv ofAge: age >= 18

context ocularium::examples::royalloyal::Customer
inv sizesAgree: programs->size() = cards->select( valid = true )->size()

context ocularium::examples::royalloyal::Customer::age
post : age = age@pre + 1

context ocularium::examples::royalloyal::ProgramPartner
inv nrOfParticipants: numberOfCustomers = programs.participants->asSet()->size()

context ocularium::examples::royalloyal::ProgramPartner
inv totalPoints: deliveredServices.transactions.points->sum() < 10,000

context ocularium::examples::royalloyal::ProgramPartner
inv totalPointsEarning: deliveredServices.transactions ->select( oclIsTypeOf( Earning ) ).points->sum() < 10,000

context ocularium::examples::royalloyal::CustomerCard
inv checkDates: validFrom.isBefore(goodThru)

context ocularium::examples::royalloyal::CustomerCard
inv ofAge: owner.age >= 18

context ocularium::examples::royalloyal::CustomerCard
inv : let correctDate : Boolean = self.validFrom.isBefore(Date::now) and self.goodThru.isAfter(Date::now) in if valid then correctDate = false else correctDate = true endif

context ocularium::examples::royalloyal::CustomerCard::valid
init : true

context ocularium::examples::royalloyal::CustomerCard::printedName
derive : owner.title.concat(' ').concat(owner.name)

context ocularium::examples::royalloyal::Service::upgradePointsEarned(amount: Integer): void
post : calcPoints() = calcPoints@pre() + amount

context ocularium::examples::royalloyal::LoyaltyAccount::points
init : 0

context ocularium::examples::royalloyal::LoyaltyAccount::isEmpty(): Boolean
post : result = (points = 0)

context ocularium::examples::royalloyal::Membership
inv correctCard: participants.cards->includes(self.card)

context ocularium::examples::royalloyal::Membership
def : getCurrentLevelName() : String = currentLevel.name

context ocularium::examples::royalloyal::Membership
inv levelAndColor: currentLevel.name = 'Silver' implies card.color = Color::silver and currentLevel.name = 'Gold' implies card.color = Color::gold

